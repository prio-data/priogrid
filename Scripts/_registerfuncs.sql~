
-- Function for joining finished tables to priogrid with geometries for visualizing, works on both static and yearly tables
CREATE FUNCTION Join2PrioGrid(text) RETURNS integer AS
$$
DECLARE 
	tablename ALIAS FOR $1;
BEGIN
	EXECUTE 'CREATE TABLE test.silly_' || tablename || ' AS SELECT p.cell, d.* FROM priogrid_land AS p, ' || tablename || ' AS d WHERE d.gid = p.gid;';
	RETURN 0;
END
$$ language 'plpgsql';







-- DEFINE FUNCTION TO GET DAYS OF MONTH
-- source: http://www.postgresql.org/message-id/Pine.LNX.4.20.0112070925260.3394-100000@s18.pradeshta.net
CREATE OR REPLACE FUNCTION days_in_month(int, int) RETURNS float8 AS -- year, month
	'SELECT date_part(''day'',
		(($1::text || ''-'' || $2::text || ''-01'')::date
			+ ''1 month''::interval
			- ''1 day''::interval)) AS days'
LANGUAGE 'sql';
	





-- Function for recentering a tiled raster horizontally
CREATE FUNCTION Recenter_Raster_Table(text, text, numeric) 
RETURNS SETOF record AS  
$$
DECLARE
	_rastertablename ALIAS FOR $1;
	_rastercolname ALIAS FOR $2;
	_new_xcenter ALIAS FOR $3;
BEGIN
	RETURN QUERY EXECUTE '
	WITH
	_input AS
		(
		SELECT ' || _rastercolname || ' AS rast FROM ' || _rastertablename || '
		)
		,
	_wholerastmeta AS
		-- whole raster table meta (assumes right and up increasing orientation of coords)
		(
		WITH 
			leftedges AS (SELECT ST_UpperLeftX(rast) AS val FROM _input),
			rightedges AS (SELECT ST_UpperLeftX(rast)+ST_Width(rast)*ST_ScaleX(rast) AS val FROM _input),
			topedges AS (SELECT ST_UpperLeftY(rast) AS val FROM _input),
			bottomedges AS (SELECT ST_UpperLeftY(rast)+ST_Height(rast)*ST_ScaleY(rast) AS val FROM _input)
		SELECT MIN(leftedges.val) AS leftedge, MAX(rightedges.val) AS rightedge, MIN(bottomedges.val) AS bottomedge, MAX(topedges.val) AS topedge
		FROM leftedges, rightedges, bottomedges, topedges
		)
		,
	_clipped AS
		-- clip all tiles to the left and right of new rightedge
		(
		SELECT ST_Clip(rast, ST_SetSRID(ST_MakeEnvelope(leftedge, bottomedge, _new_xcenter, topedge), 4326)) AS rast
		FROM _input, _wholerastmeta
		WHERE rast && ST_MakeEnvelope(leftedge, bottomedge, _new_xcenter, topedge)

		UNION ALL

		SELECT ST_Clip(rast, ST_SetSRID(ST_MakeEnvelope(_new_xcenter, bottomedge, rightedge, topedge), 4326)) AS rast
		FROM _input, _wholerastmeta
		WHERE rast && ST_MakeEnvelope(_new_xcenter, bottomedge, rightedge, topedge)
		)
	-- left offset any tiles that are beyond the new rightedge
	SELECT (CASE WHEN ST_UpperLeftX(rast) >= _new_xcenter
		THEN ST_SetUpperLeft(rast, ST_UpperLeftX(rast)-_new_xcenter, ST_UpperLeftY(rast))
		ELSE rast
		END) AS ' || _rastercolname || '
	FROM _clipped
	';
END
$$ language 'plpgsql';	



