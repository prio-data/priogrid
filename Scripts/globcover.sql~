
-- WARNING, THIS SCRIPT TAKES ?? HOURS ---

-- Clip globcover raster tiles to priogrid cells

DROP TABLE IF EXISTS globcover_clipped;
CREATE TEMP TABLE globcover_clipped AS
(
SELECT gid, ST_Union(raster) as rast
FROM 
	(
	SELECT p.gid, ST_Clip(g.rast, p.cell) as raster 
	FROM orig.globcover AS g, priogrid_land AS p
	WHERE g.rast && p.cell
	) AS foo
GROUP BY gid
);

-- For each gid/raster, create multiple rows containing the count for each unique value
DROP TABLE IF EXISTS dev.globcover;
CREATE TABLE dev.globcover
AS
(
SELECT gid, (ST_ValueCount(rast)).*
FROM globcover_clipped
);

-- Add index because will be using many where queries on the "value" column
CREATE INDEX globcover_idx_1 ON dev.globcover USING BTREE("value");
ANALYZE dev.globcover;


-- Calculate cell counts of different landcovers in new table

DROP TABLE IF EXISTS globcover;
CREATE TABLE globcover
AS
(
SELECT p.gid, c.num_crop, u.num_urban, f.num_forest, sb.semibarren, b.num_barren, w.num_water, a.num_cells 
FROM priogrid_land AS p
LEFT JOIN
	(
	SELECT gid, sum(count) as num_urban 
	FROM dev.globcover as m 
	WHERE value = 190
	GROUP BY gid
	) as u
ON p.gid = u.gid
LEFT JOIN
	(
	SELECT gid, sum(count) as num_crop
	FROM dev.globcover as m 
	WHERE value <= 20
	GROUP BY gid
	) as c
ON p.gid = u.gid
LEFT JOIN
	(
	SELECT gid, sum(count) as num_forest 
	FROM dev.globcover as m 
	WHERE 	(value >= 40 AND value <=100) 
		OR value = 160 OR value = 170
	GROUP BY gid
	) AS f
ON p.gid = f.gid
LEFT JOIN
	(
	SELECT gid, sum(count) as num_semibarren 
	FROM dev.globcover as m 
	WHERE 	(value >= 110 AND value <=150)
		OR value = 180
		OR value = 30
	GROUP BY gid
	) AS sb
ON p.gid = f.gid
LEFT JOIN
	(
	SELECT gid, sum(count) as num_barren 
	FROM dev.globcover as m 
	WHERE value = 200 OR value = 220
	GROUP BY gid
	) as b
ON p.gid = b.gid
LEFT JOIN
	(
	SELECT gid, sum(count) as num_water 
	FROM dev.globcover as m 
	WHERE value = 210
	GROUP BY gid
	) as w
ON p.gid = w.gid
LEFT JOIN
	(
	SELECT gid, sum(count) as num_cells 
	FROM dev.globcover as m 
	GROUP BY gid
	) as a
ON p.gid = a.gid
);


-- Calculate new stats vars as proportion of total cells

ALTER TABLE globcover ADD COLUMN forest double precision,
			ADD COLUMN urban double precision,
			ADD COLUMN rural double precision,
			ADD COLUMN barren double precision,
			ADD COLUMN water double precision;

UPDATE globcover SET forest = num_forest::float / num_cells::float;
UPDATE globcover SET urban = num_urban::float / num_cells::float;
UPDATE globcover SET rural = num_rural::float / num_cells::float;
UPDATE globcover SET barren = num_barren::float / num_cells::float;
UPDATE globcover SET water = num_water::float / num_cells::float;


-- Make missing into 0 values
UPDATE globcover SET forest = 0 WHERE forest IS NULL;
UPDATE globcover SET urban = 0 WHERE urban IS NULL;
UPDATE globcover SET rural = 0 WHERE rural IS NULL;
UPDATE globcover SET barren = 0 WHERE barren IS NULL;
UPDATE globcover SET water = 0 WHERE water IS NULL;


